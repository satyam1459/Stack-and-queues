A celebrity is a person who is known to all but does not know anyone at a party. If you go to a party of N people, find if there is a celebrity in the party or not.
A square NxN matrix M[][] is used to represent people at the party such that if an element of row i and column j  is set to 1 it means ith person knows jth person. Here M[i][i] will always be 0.
Note: Follow 0 based indexing.
Follow Up: Can you optimize it to O(N)

Basic approach--> 


//User function Template for Java


class Solution
{ 
    //Function to find if there is a celebrity in the party or not.
    int celebrity(int M[][], int n)
    {
    	int[] in=new int[n];    //tells by how many a person is known 
    	int[] out=new int[n];   //tells how many person he knows
    	
    	for(int i=0;i<n;i++){
    	    for(int j=0;j<n;j++)
    	        if(M[i][j]==1){
    	            // i knows j--> number of i known person increase && no. of j known by person increases
    	            out[i]++;
    	            in[j]++;
    	        }
    	}
    	for(int i=0;i<n;i++){
    	    if(in[i]==n-1 && out[i]==0)
    	        return i;
    	}
    	return -1;
    }
}


Optimal Solution--->     Using stacks and queues


//User function Template for Java


class Solution
{ 
    //Function to find if there is a celebrity in the party or not.
    int celebrity(int M[][], int n)
    {
        Stack<Integer> st=new Stack<>();
        for(int i=0; i<n;i++){
            st.push(i);
        }
        while(st.size()>1){
            int i=st.pop();
            int j=st.pop();
            if(M[i][j]==1){
                //if i knows j --> i is not celebrity 
                    st.push(j);
            }
            //if i does not know j --> j is not celebrity
            else
                st.push(i);
        }
        //the last element could be the potential match
        int pot=st.pop();
        for(int i=0; i<n; i++){
            if( i != pot){
                if(M[i][pot]==0 || M[pot][i]==1)
                    return -1;
            }
        }
        return pot;
    }
}
